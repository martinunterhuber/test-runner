plugins {
    id "java"
}

group "org.example"
version "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

sourceSets {
    analyze {
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }

    execute {
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }

    test {
        def dir = "testProject/build/classes/java"
        runtimeClasspath += files(dir + "/main") + files(dir) + files(dir + "/test")
    }
}

configurations {
    analyzeImplementation.extendsFrom implementation
    executeImplementation.extendsFrom implementation
    compileOnly.extendsFrom analyzeImplementation
    compileOnly.extendsFrom executeImplementation
    testImplementation.extendsFrom compileOnly
}

dependencies {
    def junitVersion = "5.8.2"
    def junitPlatformVersion = "1.8.2"
    def slf4jVersion = "1.8.0-beta4"
    def ckVersion = "0.7.0"
    def pmdVersion = "6.42.0"
    def jGraphVersion = "1.5.1"
    def spotbugsVersion = "4.5.3"

    executeImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    executeImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    executeImplementation "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    executeImplementation "org.junit.vintage:junit-vintage-engine:$junitVersion"
    executeImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    executeImplementation "org.slf4j:slf4j-api:$slf4jVersion"
    executeImplementation "org.slf4j:slf4j-nop:$slf4jVersion"

    analyzeImplementation "org.slf4j:slf4j-api:$slf4jVersion"
    analyzeImplementation "org.slf4j:slf4j-nop:$slf4jVersion"
    analyzeImplementation "com.github.mauricioaniche:ck:$ckVersion"
    analyzeImplementation "net.sourceforge.pmd:pmd-java:$pmdVersion"
    analyzeImplementation "org.jgrapht:jgrapht-core:$jGraphVersion"
    analyzeImplementation "com.github.spotbugs:spotbugs-annotations:$spotbugsVersion"
    analyzeImplementation "com.github.spotbugs:spotbugs:$spotbugsVersion"
}

test {
    dependsOn(":testProject:assemble")
    dependsOn(":testProject:compileTestJava")
    useJUnitPlatform()
}

class TestTask extends DefaultTask {
    @Input
    @Option(option = "directory", description = "The root directory of the project")
    String directory

    @Input
    @Option(option = "packageName", description = "The name of the package to test")
    String packageName
}


task doCustomTest(type: TestTask) {
    doFirst {
        fileTree(dir: "$directory").filter { file -> file.toString().endsWith("pom.xml") || file.toString().endsWith("build.gradle") }.each { file ->
            def dir = file.getParent()
            def out = new ByteArrayOutputStream()
            if (file.toString().endsWith("build.gradle")) {
                exec {
                    String selfDirectory = workingDir
                    workingDir "$directory"
                    commandLine "./gradlew", "-I", "$selfDirectory/init.gradle", "-q", "getRuntimeClasspath"
                    standardOutput = out
                }
            }
            javaexec {
                classpath = sourceSets.analyze.runtimeClasspath
                mainClass = "at.unterhuber.test_runner.ProjectAnalyzer"
                String selfDirectory = workingDir
                workingDir = dir
                args = [dir, packageName, selfDirectory]
            }

            javaexec {
                classpath = sourceSets.execute.runtimeClasspath
                out.toString()?.split(":")?.each {
                    if (!it.isBlank()) {
                        classpath += files(it)
                    }
                }
                classpath += fileTree(dir: dir + "/target/classes") +
                        fileTree(dir: dir + "/target") +
                        fileTree(dir: dir + "/target/test-classes") +
                        fileTree(dir: dir + "/target/dependency") +
                        fileTree(dir: dir + "/build/classes/java/main") +
                        fileTree(dir: dir + "/build/classes/java") +
                        fileTree(dir: dir + "/build/classes/java/test")
                mainClass = "at.unterhuber.test_runner.TestExecutor"
                workingDir = dir
            }
        }
    }
}

doCustomTest.configure {
    dependsOn assemble
    dependsOn compileTestJava
}